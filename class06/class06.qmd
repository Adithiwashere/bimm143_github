---
title: "class06" 
author: "Adithi Kumar (PID:A16653979)"
format: pdf
editor: visual
---

#All about functions in R

Functions are the way we get stuff done in R. We call a function to read data, compute stuff, plot stuff, etc. etc.

R makes writing functions accessible but we should always start by trying to get a working snippet of code first before we write our function.

##Todays lab

We will grade a whole class of student assignments. We will always try to start iwth a simplified version of the problem.

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA) 
```

If we want the average score for one student , we can use the 'mean()' function

```{r}
mean(student1)
```

Let's be nice instructors and drop the lowest score so the answer here should be 100.

```{r}
min(student1)
```

I found the 'which.min()' function may be useful here. How does it work? Let's just try it:

```{r}
student1
which.min(student1)
mean(student1[-8])

```

'which.min' give us the position of the lowest score. 'vector\[which.min(vector)\]' gives us the lowest score.

Since we know the 8th position is the lowest score, we can find the mean without 8 by using the minus sign. *( - = without)*

All together this code is the best way to get the overall grade while dropping the lowest score.

```{r}
mean(student1[-which.min(student1)])

```

Let's test on the other students:

```{r}
student2
which.min(student2)
mean(student2[-which.min(student2)])
```

where is the problem? - oh it is the 'mean()' with NA input returns NA by default... but I can change this

By making na.rm as TRUE, the NAs are stripped before the computation proceeds

```{r}
mean(student2)
mean(student2, trim =0, na.rm=TRUE)  

```

Student3 has multiple NAs. the na.rm = TRUE command gets rid of ALL NAs so student3 (who only did one assignment) will get a mean score of 90\-- which isn't fair.

```{r}
student3 
mean(student3, na.rm =TRUE)
```

I want to stop working with 'student1' , 'student2', and 'student3' and typing it out every time so instead work with an input called 'x'

```{r}
x <- student2
x
```

We want to overwrite the NA values with a zero - if you miss a homework, you score zero on this homework.

Google and Claude told me about the 'is.na()' function. Lets see how it works.

```{r}
x
is.na(x)  
x[is.na(x)]


```

We can use logicals to index a vector. vector\[\] will only put out the TRUE values. You can then assign them new values (overwrite them).

```{r}
y <- 1:5 
y 
y<3 
y[y<3] 
y[y<3] <- 100 
y
```

This is my working snippet of code that solves the problem for all my example student inputs :-)

```{r}
x [is.na(x)] <- 0 
x 
mean(x[-which.min(x)])
```

This works for student 3 too!

```{r}
x <- student3 
x  
#make NA equal to 0
x[is.na(x)] <- 0 
# drop the lowest score and get the mean
mean(x[-which.min(x)]) 
```

Now, we need to turn this into a function to answer Q1:

# Q1.

Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: "https://tinyurl.com/gradeinput" \[3pts\]

```{r}
grade <- function (x){
  #make NA equal to 0
  x[is.na(x)] <- 0 
  #drop the lowest score and get the mean
  mean(x[-which.min(x)])
} 

```

Use this function:

```{r}
grade(student1)
grade(student2) 
grade(student3)
```

```{r}
gradebook <- read.csv("https://tinyurl.com/gradeinput", row.names =1) 
gradebook 
```

We need to read the gradebook. By using the 'apply' function, we can apply the 'grade' function that takes the average while dropping the lowest score to the gradebook.

TO use apply, Apply( whatever you want the function to be applied to, Margin, function)

Margin determines whether the function is applied to the row (Margin =1), the column (margin =2), or both (c(1,2))

```{r}

ans <- apply(gradebook, 1, grade) 
ans
```

# Q2:

Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook?

```{r}
which.max(ans)
ans
```

Student 18 was the top scoring student overall in the gradebook.

# Q3:

From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? \[2pts\]

```{r}
mean_homework_scores <- apply(gradebook, 2, mean, na.rm =T)
which.min(mean_homework_scores) 
apply(gradebook, 2, sum, na.rm = T )
```

The homework that was toughest on the students was homework 2.

# Q4:

From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score?

I used Bard (Google's AI) to try to find a function that would help. It gave me the function 'corr()' which would give a correlation coefficient; the larger the correlation coefficient, the more predictive the homework was on the overall score.

```{r}
mask <- gradebook[is.na(gradebook)] <- 0 


cor_hwscores <- apply(gradebook, 2, cor, y=ans) 

which.max(cor_hwscores)

```

Homework 5 has the highest correlation with average grade score.
