---
title: "Structural Bioinformatics"
author: "Adithi Kumar"
format: pdf
editor: visual
---

# Introduction to the RCSB Protein Data Bank (PDB)

First, let's see what is in the PDB database, the main repository of protein structures.

Downloaded composition stats from: "<https://www.rcsb.org/stats/summary>"

For context:

```         
Release 2023_04 of 13-Sep-2023 of UniProtKB/TrEMBL contains 251600768 sequence entries
```

The PDB only contains 183,201. (Structure determination takes a very long time and is very expensive) Sequencing is a lot easier and inexpensive.

```{r}
stats <- read.csv("https://tinyurl.com/statspdb",row.names=1)
stats

```

We need to get rid of commas in the numbers because R is treating this dataframe as a characters instead of numericals.

```{r}
x <- stats$X.ray 
x
```

```{r}
#gsub will (globally) substitute the commas with nothing on the column from x 
# as.numeric will then convert x into a numeric 
as.numeric(gsub(",", "", x))

```

```{r}
rm.comma <- function(x) {
  as.numeric(gsub(",", "", x))
}
```

```{r}
rm.comma(stats$EM)
```

I can use 'apply()' to fix the whole table...

```{r}
# apply(df, row(1) or column(2), function to apply)
pbdstats <- apply(stats,2, rm.comma)  
rownames(pbdstats) <- rownames(stats)
head(pbdstats)
```

## Q1: What percentage of structures in the PDB are solved by X-Ray and Electron Microscopy.

```{r}
#long way to answer
(sum(pbdstats[,1])+sum(pbdstats[,2]))/(sum(pbdstats[,"Total"])) 

#OR make a function with all column totals
totals <- apply(pbdstats, 2, sum) 
round(totals/totals["Total"]*100,2)

84.83 +8.33
```

93.16% of the structures in the PDB are solved by X-Ray and Electron Microcopy

## Q2: What proportion of structures in the PDB are protein?

```{r}
ptn_total <- pbdstats[1, "Total"] 

ptn_total/sum(pbdstats[, "Total"])

```

86.67% of the structures in the PDB are protein.

## Q3: Type HIV in the PDB website search box on the home page and determine how many HIV-1 protease structures are in the current PDB?

Skipped for time!

# Visualizing the HIV-1 protease structure

## **Q4**: Water molecules normally have 3 atoms. Why do we see just one atom per water molecule in this structure?

This is a 2 angstrom structure.Hydrogen is smaller than the resolution of the program so it can't be seen in the structure.

## **Q5**: There is a critical "conserved" water molecule in the binding site. Can you identify this water molecule? What residue number does this water molecule have

HOH 308; the water molecule is hydrogen bonded to the protein and the ligand; it stabilizes the binding between the two.

## **Q6**: Generate and save a figure clearly showing the two distinct chains of HIV-protease along with the ligand. You might also consider showing the catalytic residues ASP 25 in each chain and the critical water (we recommend *"Ball & Stick"* for these side-chains). Add this figure to your Quarto document.

Here is a lovely figure of HIP-Pr with the catalytic ASP residues, the MK1 compound and the all important water 308.

![](1HSG.png)

# Introduction to Bio3D in R

The bio3d package for structural bioinformatics

```{r}
library(bio3d)
pdb <- read.pdb("1hsg") 
pdb
```

## **Q7:** How many amino acid residues are there in this pdb object?

There are 198 amino acid residues in this PDB object

## **Q8:** Name one of the two non-protein residues?

HOH and MK1 (the drug/ligand)

## **Q9:** How many protein chains are in this structure?

There are 2 protein chains in this structure.

```{r}
attributes(pdb)
```

```{r}
head(pdb$atom)
```

Look at Adenylate Kinase!

Let's finish today with a bioinformatics calculation to predict the functional motions of a PDB structure.

```{r}
adk <- read.pdb("6s36") 
adk
```

Normal Mode Analysis is used predict protein flexibility and possible conformational changes in structural bioinformatics.

```{r}
#Perform a NMA for adk 
m <- nma (adk) 
plot(m)
```

```{r}
# look at a "movie" of those possible motions by load the resulting "adk_m7.pdb" into Mol with Open Files
mktrj(m, file="adk_m7.pdb")
```

# Comparative Structure Analysis of Adenylate Kinase

```{r}
# Install packages in the R console NOT your Rmd/Quarto file

#install.packages("bio3d")
#install.packages("devtools")
#install.packages("BiocManager")

#BiocManager::install("msa")
#devtools::install_bitbucket("Grantlab/bio3d-view")
```

'Install.packages()' is used to install packages from the CRAN repository for R packages; BioConducter is a separate repository of R; these packages can be accessed using 'BiocManager::install()'. R packages on GitHub or BitBucket can be installed using 'devtools::install_github()' or 'devtools::install_bitbucket()'

The 'msa' package is from BioConductor. These packages focus on genomics type work and are managed by the 'BiocManager' package.

## **Q10.** Which of the packages above is found only on BioConductor and not CRAN?

msa

## **Q11.** Which of the above packages is not found on BioConductor or CRAN?:

bio3d-view

## Q12. True or False? Functions from the devtools package can be used to install packages from GitHub and BitBucket?

TRUE

```{r}
library(bio3d) 
#fetch query sequence for chain A of the PDB ID 1AKE
aa <- get.seq("1ake_A") 
aa
```

## **Q13.** How many amino acids are in this sequence, i.e.Â how long is this sequence?

There are 214 amino acids in this sequence.

Now I can search the PDB database for related sequences:

```{r}
# Blast or hmmer search to find similar sequences and structures in the PDB 

#b <- blast.pdb(aa)
```

```{r}
#visualize the blast results 
#hits <- plot(b)
```

```{r}
#attributes(b) 
#head(b$hit.tbl) 
hits <- NULL
hits$pdb.id <- c('1AKE_A','6S36_A','6RZE_A','3HPR_A','1E4V_A','5EJE_A','1E4Y_A','3X2S_A','6HAP_A','6HAM_A','4K46_A','3GMT_A','4PZL_A')
```

```{r}
hits$pdb.id
```

'pdb.id' tells us the ID of each of the related structures. Let's annotate these structures (in other words find out what they are. what species they are from, stuff about the experiment they were solved in, etc.)

For this, we can use the 'pdb.annotate()'

```{r}
#anno short for annotate
anno <- pdb.annotate(hits$pdb.id) 

```

```{r}
#attributes(anno) 
head(anno)
```

We can use 'get.pdb()' to retrieve the structures that were related to our query sequence. We can download these structures for further analysis.

```{r}
# Download releated PDB files 
#extra arguments help download faster, gzip makes file size smaller, path create folders in current working directory call pdbs
files <- get.pdb(hits$pdb.id, path="pdbs", split=TRUE, gzip=TRUE)

```

You can use molstar to visualize all of the structures in the pdbs file

# Align and Superpose Structures

Now we have all these related structures...

```{r}
# Align the related PDBs 
pdbs <- pdbaln(files, fit = TRUE, exefile = 'msa') 
pdbs
```

# Principal Component Analysis

```{r}
# perform PCA  
pc.xray <- pca(pdbs) 
plot(pc.xray)
```

```{r}
# Visualize first principal component
pc1 <- mktrj(pc.xray, pc=1, file="pc_1.pdb")
```

# Lab 11

Superposed structures using Mol\* colored by uncertainty (red is high confidence, blue is low confidence)

![](HIVPR_MONOMER.png)

```{r}
results_dir <- "hivpr_dimer_23119/"
```

```{r}
# File names for all PDB models
pdb_files <- list.files(path=results_dir,
                        pattern="*.pdb",
                        full.names = TRUE)
pdb_files
```

```{r}
# Optionally install the MSA package for use with pdbaln()
#install.packages("BiocManager")
#BiocManager::install("msa")

pdbs <- pdbaln(pdb_files, fit=TRUE, exefile="msa")
```

```{r}

pdbs
```

```{r}
# calculate rmssd between all models 
rd <- rmsd(pdbs) 
range(rd)
```

```{r}
#draw heatmap of RMSD matrix values
library(pheatmap)

colnames(rd) <- paste0("m",1:5)
rownames(rd) <- paste0("m",1:5)
pheatmap(rd)
```

```{r}
# Read a reference PDB structure
pdb <- read.pdb("1hsg")
```

```{r}
plotb3(pdbs$b, typ="l", lwd=2, sse=pdb)
points(pdbs$b[2,], typ="l", col="red")
points(pdbs$b[3,], typ="l", col="blue")
points(pdbs$b[4,], typ="l", col="darkgreen")
points(pdbs$b[5,], typ="l", col="orange")
abline(v=100, col="gray")

```

```{r}
#improve superposition of model by finding most consisten core common to all the models 
core <- core.find(pdbs)

```

```{r}
#use core atom positions for a better superpostion
core.inds <- print(core, vol =0.5)
```

```{r}
xyz <- pdbfit(pdbs, core.inds, outpath ="corefit_structures") 

```

![](core.fit.png)

```{r}
rd <- rmsd(xyz)
```

```{r}
# Change the names for easy reference
colnames(rd) <- paste0("m",1:5)
rownames(rd) <- paste0("m",1:5)
pheatmap(rd)
```

```{r}
rf <- rmsf(xyz)

plotb3(rf, sse=pdb)
abline(v=100, col="gray", ylab="RMSF")
```

## Predicted Alignment Error for Domains

Predicted Aligned Error (PAE) is used as a measure of confidence for model.

```{r}
library(jsonlite)

# Listing of all PAE JSON files
pae_files <- list.files(path=results_dir,
                        pattern=".*model.*\\.json",
                        full.names = TRUE)
```

```{r}
#read the first and fifth files
pae1 <- read_json(pae_files[1],simplifyVector = TRUE)
pae5 <- read_json(pae_files[5],simplifyVector = TRUE)

attributes(pae1)
```

```{r}
head(pae1$plddt) 
```

```{r}
pae1$max_pae 
pae5$max_pae
```

Max PAE for 5 is worse than 1 (lower the better

```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)")
```

```{r}
plot.dmat(pae5$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```

```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```

## **Residue conservation from alignment file**

```{r}
aln_file <- list.files(path=results_dir,
                       pattern=".a3m$",
                        full.names = TRUE)
aln_file
```

```{r}
aln <- read.fasta(aln_file[1], to.upper = TRUE)
```

How many sequences are in this alignment?

```{r}
dim(aln$ali)

```

```{r}
sim <- conserv(aln)
```

```{r}
plotb3(sim[1:99], sse=trim.pdb(pdb, chain="A"))
```

```{r}
con <- consensus(aln, cutoff = 0.9)
con$seq
```

```{r}
m1.pdb <- read.pdb(pdb_files[1])
occ <- vec2resno(c(sim[1:99], sim[1:99]), m1.pdb$atom$resno)
write.pdb(m1.pdb, o=occ, file="m1_conserv.pdb")
```
